docker ps
docker ps -a
dokcer images
dokcer images -a
docker info
docker pull <imagename>:<Tag>
docker run -d <image_ID> /bin/bash
docker run -it <image_ID> /bin/bash
docker restart <Container_Name>
docker exec -it <Container_Name> /bin/bash
docker attach <Container_Name>
docker logs <Container_Name>
docker stop <Container_Name>
docker inspect <Container_Name>
docker commit -m "What did you do to the image" -a "Author Name" container-id repository/new_image_name
docker login -u <Docker_Username>
docker images -a
docker push Docker_Username/Repository:Tag
docker export <Container_Name> > <Exporting filename with tar(mybuild4.tar)>
  #docker export practical_elion > pushpa.tar
docker import mybuild4.tar mybuild:importv5
 docker rm $(docker ps -a -q) 
docker rmi $(docker images -q) 	
docker tag <imageID> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry
docker stats <Container_name>  // to check the cpu and memory utlizying by container
docker ps -q | xargs  docker stats --no-stream  // to check the cpu and memory utlizying by all container
docker run -it --cpus=".5" ubuntu /bin/bash    // to set the cpu size for the contaiiner
docker container inspect <container-id> |grep -i cpu
docker images -f dangling=true
docker images -f dangling=true -q
docker rmi $(docker images -f dangling=true -q)
docker inspect <container-id>

docker run -d -p 3306:3306 --name sample_mysql -e MYSQL_ROOT_PASSWORD=12345678 mysql:5.7

docker run -d -p 3306:3306 --name sample_mysql -e MYSQL_ROOT_PASSWORD=12345678 -e MYSQL_DATABASE=docker_db -e MYSQL_USER=docker_user -e MYSQL_PASSWORD=1234 mysql:5.7

docker run -d --name postgres -e "POSTGRES_PASSWORD=12345678" -e POSTGRES_USER=docker_user _e POSTGRES_DB=docker_db -p 5432:5432 postgres

docker run --help | grep memory
docker run --help | grep cpu

docekr run -d --name nginx --memory "200mb" nginx-alphine 
docekr run -d --name nginx --memory "200mb" --cpuset-cpu 0,1 nginx-alphine 

docker cp index1.html 
hippo:/usr/local/hippo/htdocs/index.html // this is used to copy files from host machine to container.


docker cp hippo:/opt/hippo.txt . // this is used to copy the document from container to host machine.

docker stats nginx

docker run -d --name hippo centos python -m SimpleHTTPServer 8080

docker run -d --name hippo -p 9090:8080 centos python -m SimpleHTTPServer 8080

-----------------------------------
docker run -d --name mysql -e "MYSQL_ROOT_PASSWORD=12345678" mysql:5.7

docker exec -it containerid bash

mysql -u root -p12345678

show database
create database test_db;
show database

exit
-------------------
docker run -d --name mysql -e "MYSQL_ROOT_PASSWORD=12345678" mysql:5.7

docker run -d -v /mnt/mysql:/var/lib/mysql --name mysql -e "MYSQL_ROOT_PASSWORD=12345678" mysql:5.7

docker volume create hippo_volume
docker info | grep root
cd /mnt/docker/volume

docker run -d -v hippo_volume:/var/lib/mysql --name mysql -e "MYSQL_ROOT_PASSWORD=12345678" mysql:5.7

docker run -d --name mysql -e "MYSQL_ROOT_PASSWORD=12345678" -v var/lib/mysql mysql:5.7 

docker rm -fv mysql

ip a | grep docker

docker network ls

docker exec container_name bash -c "ping ip od second_container"

docker network inspect bridge
docker network create --help
docker network create -d bridge --subbnet  172.18.0.0/16 --gateway 172.18.0.1 hippo_network

docker network rm hippo_network

docker run -d --network hippo_network --name sample centos 

docker network inspect hippo_network

docker network connect // used to communicate between different network

docker network create -d bridge --subnet 172.20.0.0/16 --gateway 172.20.0.1 hippo1
docker network create -d bridge --subnet 172.30.0.0/16 --gateway 172.30.0.1 hippo2

docker run -itd --name hippo1_cont --network hippo1 centos
docker run -itd --name hippo2_cont --network hippo2 centos

docker exec hippo1_cont bash -c "ping hippo2_cont"
 

docker network connect hippo1 hippo2_cont  // after this we can ping different network

docker exec hippo1_cont bash -c "ping hippo2_cont"

docker network disconnect hippo1 hippo2_cont

docker run -itd --network htippo1 --ip 172.20.0.150 --name sample centos  // assign IP to a container


docker run -it --network host centos bash
hostname  // get same linke ec2




docker run -dit --network none centos
docker exec -it container_id bash

du -shc

docker volume --help

docker volume create

docker volume ls

docker volume inspect volumename

docker volume rm volumename

docker volume prune  // remove unused volume

docker pull jenkins

dockr run --name demo -v myvolume:/var/jenkins_home -p 8080 -p 50000:50000 jenkins


docker network ls
  docker network inspect bridge
  sudo yum install bridge-utils
  brctl show
  docker run -it alpine sh
  docker network inspect bridge
  brctl show


sudo usermod -a -G docker $USER
groups
stat /var/run/docker.sock
    sudo chmod 666 /var/run/docker.sock
    
    cat /etc/*release


*******************************************************************

docker network create frontend
docker network create localhost --internal
docker container run -d --name database \
--network localhost \
-e MYSQL_ROOT_PASSWORD=P$ssW)rd0! \
mysql:5.7

docker container run -d \
--name frontend-app \
--network frontend \
nginx:latest


docker container ls

docker network connect localhost frontend-app
docker container inspect frontend-app




docker volume create mysql_data
docker container run -d --name app-database \
--mount type=volume,source=mysql_data,target=/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=P4ssW0rd0! \
mysql:latest
docker container inspect app-database


